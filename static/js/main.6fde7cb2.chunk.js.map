{"version":3,"sources":["logo.svg","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","time","ftime","space","grid","cu","Color","lab","maxValues","columnNum","size","x","y","color","p","p1","$divide","p2","pointer","c1","$multiply","Pt","make","to","LABtoRGB","toString","i","len","Create","gridCells","innerBound","length","ceil","c","interpolate","Num","cycle","this","form","fillOnly","rect","font","Rectangle","fromCenter","center","fill","stroke","alignText","paragraphBox","bound","play","PtsCanvas","App","className","style","height","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,uKC2C5BC,E,gLArCHC,EAAMC,EAAOC,GAkBjB,IAhBA,IAAIC,EAAO,GAEPC,EAAKC,IAAMC,IAAID,IAAME,UAAU,QAE/BC,EAAY,IADJN,EAAMO,KAAKC,EAAIR,EAAMO,KAAKE,GAMlCC,EAAQ,SAACC,GACT,IAAIC,EAAKD,EAAEE,QAAQb,EAAMO,MACrBO,EAAKd,EAAMe,QAAQF,QAAQb,EAAMO,MACjCS,EAAKd,EAAGe,UAAUC,IAAGC,KAAK,EAAG,GAAGC,GAAGN,EAAGN,EAAGI,EAAGJ,EAAI,GAAKI,EAAGH,EAAI,KAChE,OAAON,IAAMkB,SAASL,GAAIM,SAAS,QAG9BC,EAAI,EAAGC,GAVhBvB,EAAOwB,IAAOC,UAAU1B,EAAM2B,WAAYrB,EAD7B,KAWcsB,OAAQL,EAAIC,EAAKD,IAAK,CAC7CtB,EAAKsB,GAAG,GAAGM,OACX,IAAIC,EAAI7B,EAAKsB,GAAGQ,YAAYC,IAAIC,OAAOnC,EAAW,GAAJyB,GAAU,IAAO,MAC/DW,KAAKC,KAAKC,SAAS1B,EAAMoB,IAAIO,KAAKpC,EAAKsB,IAI3CW,KAAKC,KAAKG,KAAK,IACf,IAAID,EAAOE,IAAUC,WAAYxC,EAAMyC,OAAQ,KAE/CP,KAAKC,KAAKO,KAAK,iBAAiBC,OAAO,gBAAiB,GAAGN,KAAMA,GACjEH,KAAKC,KAAKC,SAAS,QAAQQ,UAAU,UAAUC,aAAcR,EAAM,YAAa,EAAG,UAAU,K,4BAG3FS,EAAO9C,GACTA,EAAM+C,W,GAnCSC,KCSRC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAUC,MAAO,CAAEC,OAAQ,QAASC,MAAO,WAD7C,MCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fde7cb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { PtsCanvas } from 'react-pts-canvas';\nimport { Color, Create, Pt, Num, Rectangle } from 'pts';\n\nclass Homepage extends PtsCanvas {\n\n    animate(time, ftime, space) {\n        // Background\n        var grid = [];\n        // Lab max value range (100, 127, 127)\n        let cu = Color.lab(Color.maxValues(\"lab\"))\n        let ratio = space.size.x / space.size.y;\n        let columnNum = 20 * ratio\n        let rowNum = 20\n        grid = Create.gridCells(space.innerBound, columnNum, rowNum);\n\n        // get LAB color string, given a point position\n        let color = (p) => {\n            let p1 = p.$divide(space.size);\n            let p2 = space.pointer.$divide(space.size); // [0.712290346622467, 0.668083667755127]\n            let c1 = cu.$multiply(Pt.make(4, 1).to(p2.x, p1.x - 0.5, p1.y - 0.5));\n            return Color.LABtoRGB(c1).toString(\"rgb\");\n        }\n\n        for (let i = 0, len = grid.length; i < len; i++) {\n            grid[i][1].ceil();\n            let c = grid[i].interpolate(Num.cycle((time + i * 60) % 1000 / 1000));\n            this.form.fillOnly(color(c)).rect(grid[i]);\n        }\n        \n        // Textbox\n        this.form.font(60);\n        let rect = Rectangle.fromCenter( space.center, 300  ); //size.$max( space.size.$divide(6) )\n        \n        this.form.fill(\"rgba(0,0,0,0)\").stroke(\"rgba(0,0,0,0)\", 3).rect( rect );\n        this.form.fillOnly(\"#FFF\").alignText(\"center\").paragraphBox( rect, \"robbiegay\", 1, \"middle\", false );\n    }\n\n    start(bound, space) {\n        space.play();\n    }\n}\n\nexport default Homepage\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Homepage from './Homepage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage style={{ height: '100vh', width: '100vw' }} /> {/*, zIndex:-1*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}